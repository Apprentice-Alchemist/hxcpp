<xml>
	<set name="USE_PRECOMPILED_HEADERS" value="gcc" />
	<set name="USE_GCC_FILETYPES" value="1" />
	<set name="USE_LLVM_TOOLCHAIN" value="1" unless="mac_host" />
	<set name="USE_XCRUN" value="1" if="mac_host" unless="USE_LLVM_TOOLCHAIN || SDKROOT" />
	<set name="HXCPP_CPP11" value="1" unless="HXCPP_NO_CPP11 || HXCPP_CPP14 || HXCPP_CPP17" />
	<set name="HXCPP_LTO_THIN" value="1" if="HXCPP_OPTIMIZE_LINK_INCREMENTAL" />

	<set name="OBJGCC" value="-c11" if="HXCPP_CPP11" />
	<set name="OBJGCC" value="-c14" if="HXCPP_CPP14" />
	<set name="OBJGCC" value="-c17" if="HXCPP_CPP17" />
	<set name="OBJDBG" value="-dbg" if="debug" />
	<set name="ARCH" value="-v7" if="HXCPP_ARMV7" />
	<set name="ARCH" value="-v7s" if="HXCPP_ARMV7S" />
	<set name="ARCH" value="-64" if="HXCPP_ARM64" />

	<section unless="HXCPP_ARCH">
		<!-- Map HXCPP_* defines to HXCPP_ARCH -->
		<set name="HXCPP_ARCH" value="arm64" if="HXCPP_ARM64" />
		<set name="HXCPP_ARCH" value="x86_64" if="HXCPP_M64" unless="HXCPP_ARCH" />
		<set name="HXCPP_ARCH" value="arm64_32" if="HXCPP_ARM64_32" unless="HXCPP_ARCH" />

		<!-- For macOS and simulator targets, select based on host arch -->
		<section if="macos || iphonesim || appletvsim || watchsimulator" unless="HXCPP_ARCH">
			<set name="HXCPP_ARCH" value="arm64" if="mac_arm64_host" />
			<set name="HXCPP_ARCH" value="x86_64" unless="mac_arm64_host" />
		</section>

		<!-- For watchOS arm64_32 is the default -->
		<set name="HXCPP_ARCH" value="arm64_32" if="watchos" unless="HXCPP_ARCH" />
		<!-- For iOS and tvOS default to arm64 -->
		<set name="HXCPP_ARCH" value="arm64" if="iphoneos || appletvos" unless="HXCPP_ARCH" />
	</section>

	<unset name="MACOSX_DEPLOYMENT_TARGET" unless="macos" />
	<section if="macos">
		<setenv name="MACOSX_DEPLOYMENT_TARGET" value="10.9" unless="MACOSX_DEPLOYMENT_TARGET" />
		<set name="OBJDIR" value="darwin${OBJEXT}" />
		<set name="SDK_NAME" value="macosx${MACOSX_VER}" />
	</section>

	<setenv name="IPHONEOS_DEPLOYMENT_TARGET" value="${HXCPP_IOS_MIN_VERSION}"
		if="iphone HXCPP_IOS_MIN_VERSION" unless="IPHONEOS_DEPLOYMENT_TARGET" />
	<setenv name="IPHONEOS_DEPLOYMENT_TARGET" value="9.0" if="iphone"
		unless="IPHONEOS_DEPLOYMENT_TARGET" />
	<section if="iphoneos">
		<set name="DYLIB_EXT" value=".ios.dylib" />
		<set name="OBJDIR" value="iphoneos${OBJGCC}${OBJDBG}${ARCH}" />
		<set name="SDK_NAME" value="iphoneos${IPHONE_VER}" />
	</section>
	<section if="iphonesim">
		<set name="DYLIB_EXT" value=".sim.dylib" />
		<set name="OBJDIR" value="iphonesim${OBJGCC}${OBJDBG}${ARCH}" />
		<set name="SDK_NAME" value="iphonesimulator${IPHONE_VER}" />
	</section>

	<setenv name="TVOS_DEPLOYMENT_TARGET" value="9.0" if="appletv" unless="TVOS_DEPLOYMENT_TARGET" />
	<section if="appletvos">
		<set name="DYLIB_EXT" value=".tvos.dylib" />
		<set name="OBJDIR" value="appletvos${OBJGCC}${OBJDBG}${ARCH}" />
		<set name="SDK_NAME" value="appletvos${TVOS_VER}" />
	</section>
	<section if="appletvsim">
		<set name="DYLIB_EXT" value=".sim.dylib" />
		<set name="OBJDIR" value="appletsim${OBJGCC}${OBJDBG}${ARCH}" />
		<set name="SDK_NAME" value="appletvsimulator${TVOS_VER}" />
	</section>

	<setenv name="WATCHOS_DEPLOYMENT_TARGET" value="3.0" if="applewatch"
		unless="WATCHOS_DEPLOYMENT_TARGET" />
	<section if="watchos">
		<set name="OBJDIR" value="watchos${OBJDBG}" />
		<set name="SDK_NAME" value="watchos${WATCHOS_VER}" />
	</section>
	<section if="watchsimulator">
		<set name="OBJDIR" value="watchsim${OBJDBG}" />
		<set name="SDK_NAME" value="watchsimulator${WATCHOS_VER}" />
	</section>

	<set name="TARGET" value="${HXCPP_ARCH}-apple-darwin" />
	<set name="DYLIB_EXT" value=".dylib" unless="DYLIB_EXT" />
	<!-- Thread Sanitizer is only supported on macOS and simulator targets -->
	<unset name="HXCPP_THREAD_SANITIZE" unless="macos || iphonesim || appletvsim || watchsimulator" />

	<compiler id="darwin" exe="clang++">
		<exe name="xcrun --sdk ${SDK_NAME} clang++" if="USE_XCRUN" />
		<flag value="-target" />
		<flag value="${TARGET}" />
		<!-- While clang can find the sysroot from the SDKROOT env var -->
		<!-- adding it as a CLI argument ensures that clangd can find it too -->
		<!-- eg when using compile_commands.json generated by bear -->
		<flag value="-isysroot" if="SDKROOT" />
		<flag value="${SDKROOT}" if="SDKROOT" />
		<flag value="-c" />
		<outflag value="-o" />
		<ext value=".o" />
		<objdir value="obj/${OBJDIR}/" />

		<pchflag value="-x" />
		<pchflag value="c++-header" />

		<cppflag value="-std=c++11" if="HXCPP_CPP11" />
		<cppflag value="-std=c++14" if="HXCPP_CPP14" />
		<cppflag value="-std=c++17" if="HXCPP_CPP17" />

		<flag value="-g" if="HXCPP_DEBUG_LINK" />
		<flag value="-O2" unless="debug" />

		<flag value="-fobjc-arc" if="OBJC_ARC" />
		<flag value="-DOBJC_ARC" if="OBJC_ARC" />

		<flag value="-DENABLE_BITCODE=YES" if="ENABLE_BITCODE" />
		<flag value="-fembed-bitcode" if="ENABLE_BITCODE" />

		<flag value="-flto" if="HXCPP_OPTIMIZE_LINK" unless="debug || HXCPP_LTO_THIN" />
		<flag value="-flto=thin" if="HXCPP_LTO_THIN" unless="debug" />

		<flag value="-fsanitize=thread" if="HXCPP_THREAD_SANITIZE" />

		<flag value="-fapplication-extension" if="applewatch" />

		<flag value="-Wno-parentheses" />
		<flag value="-Wno-null-dereference" />
		<flag value="-Wno-unused-value" />
		<flag value="-Wno-overflow" />
		<flag value="-Wno-trigraphs" />
		<flag value="-Wno-bool-conversion" />
		<cppflag value="-Wno-invalid-offsetof" />
		<cppflag value="-Wno-return-type-c-linkage" />
		<mmflag value="-Wno-return-type-c-linkage" />

		<section if="macos">
			<flag value="-DHX_MACOS" />
			<flag value="-msse4.1" if="HXCPP_SSE4" unless="HXCPP_ARM64" />
		</section>

		<flag value="-DIPHONE=IPHONE" if="iphone" />
		<flag value="-DIPHONEOS=IPHONEOS" if="iphoneos" />
		<flag value="-DIPHONESIM=IPHONESIM" if="iphonesim" />

		<flag value="-DAPPLETV=APPLETV" if="appletv" />
		<flag value="-DAPPLETVOS=APPLETVOS" if="appletvos" />
		<flag value="-DAPPLETVSIM=APPLETVSIM" if="appletvsim" />

		<flag value="-DHX_APPLEWATCH" if="applewatch" />
		<flag value="-DHX_WATCHOS" if="watchos" />
		<flag value="-DHX_WATCHSIM" if="watchsimulator" />

		<flag value="-I${HXCPP}/include" />
		<include name="toolchain/common-defines.xml" />
	</compiler>

	<linker id="static_link" exe="libtool">
		<exe name="llvm-libtool-darwin" if="USE_LLVM_TOOLCHAIN" />
		<exe name="xcrun --sdk ${SDK_NAME} libtool" if="USE_XCRUN" />
		<ext value="${LIBEXT}" />
		<flag value="-static" />
		<outflag value="-o " />
		<fromfile value="-filelist " needsQuotes="false" />
	</linker>

	<linker id="dll" exe="clang++">
		<exe name="xcrun --sdk ${SDK_NAME} clang++" if="USE_XCRUN" />
		<flag value="-fuse-ld=lld" if="USE_LLVM_TOOLCHAIN" />
		<flag value="-target" />
		<flag value="${TARGET}" />
		<flag value="-Wl,-bundle,-bundle_loader,${dll_import_link}" if="dll_import_link macos" />
		<flag value="-Wl,-undefined,dynamic_lookup" unless="macos" />
		<flag value="-Wl,-cache_path_lto,/tmp" if="HXCPP_LTO_THIN" unless="debug" />
		<flag value="-fpic" />
		<flag value="-fPIC" />
		<flag value="-dynamiclib" />
		<flag value="-fvisibility=hidden" />
		<flag value="-fsanitize=thread" if="HXCPP_THREAD_SANITIZE" />
		<flag value="-framework" if="objc" />
		<flag value="Foundation" if="objc" />
		<ext value="${DYLIB_EXT}" />
		<outflag value="-o " />
	</linker>

	<linker id="exe" exe="clang++" if="macos">
		<exe name="xcrun --sdk ${SDK_NAME} clang++" if="USE_XCRUN" />
		<flag value="-fuse-ld=lld" if="USE_LLVM_TOOLCHAIN" />
		<flag value="-target" />
		<flag value="${TARGET}" />
		<flag value="-rpath" />
		<flag value="@executable_path" />
		<flag value="-Wl,-rpath,${HXCPP_RPATH}" if="HXCPP_RPATH" />
		<flag value="-Wl,-cache_path_lto,/tmp" if="HXCPP_OPTIMIZE_LINK_INCREMENTAL" unless="debug" />
		<flag value="-fsanitize=thread" if="HXCPP_THREAD_SANITIZE" />
		<flag value="-framework" if="objc" />
		<flag value="Foundation" if="objc" />
		<ext value="" />
		<outflag value="-o " />
	</linker>

	<set name="nostrip" value="1" if="debug" />
	<set name="nostrip" value="1" if="dll_import" />
	<set name="nostrip" value="1" if="dll_export" />
	<set name="nostrip" value="1" if="HXCPP_DEBUG_LINK" />
	<unset name="nostrip" if="HXCPP_DEBUG_LINK_AND_STRIP" />

	<stripper id="strip" exe="strip" unless="nostrip">
		<section if="USE_LLVM_TOOLCHAIN">
			<exe name="llvm-strip" />
			<flag value="--keep-undefined" />
			<flag value="--discard-all" />
		</section>
		<section unless="USE_LLVM_TOOLCHAIN">
			<flag value="-u" />
			<flag value="-r" />
			<flag value="-x" />
		</section>
	</stripper>
</xml>
	